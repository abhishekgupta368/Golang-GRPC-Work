// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: sumapi.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SumServiceClient is the client API for SumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SumServiceClient interface {
	GetSum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
}

type sumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSumServiceClient(cc grpc.ClientConnInterface) SumServiceClient {
	return &sumServiceClient{cc}
}

func (c *sumServiceClient) GetSum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/sumapi.SumService/GetSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SumServiceServer is the server API for SumService service.
// All implementations must embed UnimplementedSumServiceServer
// for forward compatibility
type SumServiceServer interface {
	GetSum(context.Context, *SumRequest) (*SumResponse, error)
	mustEmbedUnimplementedSumServiceServer()
}

// UnimplementedSumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSumServiceServer struct {
}

func (UnimplementedSumServiceServer) GetSum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSum not implemented")
}
func (UnimplementedSumServiceServer) mustEmbedUnimplementedSumServiceServer() {}

// UnsafeSumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SumServiceServer will
// result in compilation errors.
type UnsafeSumServiceServer interface {
	mustEmbedUnimplementedSumServiceServer()
}

func RegisterSumServiceServer(s grpc.ServiceRegistrar, srv SumServiceServer) {
	s.RegisterService(&SumService_ServiceDesc, srv)
}

func _SumService_GetSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumServiceServer).GetSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sumapi.SumService/GetSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumServiceServer).GetSum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SumService_ServiceDesc is the grpc.ServiceDesc for SumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sumapi.SumService",
	HandlerType: (*SumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSum",
			Handler:    _SumService_GetSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sumapi.proto",
}

// PrimeServiceClient is the client API for PrimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeServiceClient interface {
	GetPrime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (PrimeService_GetPrimeClient, error)
}

type primeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeServiceClient(cc grpc.ClientConnInterface) PrimeServiceClient {
	return &primeServiceClient{cc}
}

func (c *primeServiceClient) GetPrime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (PrimeService_GetPrimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeService_ServiceDesc.Streams[0], "/sumapi.PrimeService/GetPrime", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeServiceGetPrimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeService_GetPrimeClient interface {
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type primeServiceGetPrimeClient struct {
	grpc.ClientStream
}

func (x *primeServiceGetPrimeClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeServiceServer is the server API for PrimeService service.
// All implementations must embed UnimplementedPrimeServiceServer
// for forward compatibility
type PrimeServiceServer interface {
	GetPrime(*PrimeRequest, PrimeService_GetPrimeServer) error
	mustEmbedUnimplementedPrimeServiceServer()
}

// UnimplementedPrimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeServiceServer struct {
}

func (UnimplementedPrimeServiceServer) GetPrime(*PrimeRequest, PrimeService_GetPrimeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPrime not implemented")
}
func (UnimplementedPrimeServiceServer) mustEmbedUnimplementedPrimeServiceServer() {}

// UnsafePrimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeServiceServer will
// result in compilation errors.
type UnsafePrimeServiceServer interface {
	mustEmbedUnimplementedPrimeServiceServer()
}

func RegisterPrimeServiceServer(s grpc.ServiceRegistrar, srv PrimeServiceServer) {
	s.RegisterService(&PrimeService_ServiceDesc, srv)
}

func _PrimeService_GetPrime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeServiceServer).GetPrime(m, &primeServiceGetPrimeServer{stream})
}

type PrimeService_GetPrimeServer interface {
	Send(*PrimeResponse) error
	grpc.ServerStream
}

type primeServiceGetPrimeServer struct {
	grpc.ServerStream
}

func (x *primeServiceGetPrimeServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PrimeService_ServiceDesc is the grpc.ServiceDesc for PrimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sumapi.PrimeService",
	HandlerType: (*PrimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPrime",
			Handler:       _PrimeService_GetPrime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sumapi.proto",
}

// AvgServiceClient is the client API for AvgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvgServiceClient interface {
	GetAvg(ctx context.Context, opts ...grpc.CallOption) (AvgService_GetAvgClient, error)
}

type avgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvgServiceClient(cc grpc.ClientConnInterface) AvgServiceClient {
	return &avgServiceClient{cc}
}

func (c *avgServiceClient) GetAvg(ctx context.Context, opts ...grpc.CallOption) (AvgService_GetAvgClient, error) {
	stream, err := c.cc.NewStream(ctx, &AvgService_ServiceDesc.Streams[0], "/sumapi.AvgService/GetAvg", opts...)
	if err != nil {
		return nil, err
	}
	x := &avgServiceGetAvgClient{stream}
	return x, nil
}

type AvgService_GetAvgClient interface {
	Send(*AvgRequest) error
	CloseAndRecv() (*AvgResponse, error)
	grpc.ClientStream
}

type avgServiceGetAvgClient struct {
	grpc.ClientStream
}

func (x *avgServiceGetAvgClient) Send(m *AvgRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *avgServiceGetAvgClient) CloseAndRecv() (*AvgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AvgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AvgServiceServer is the server API for AvgService service.
// All implementations must embed UnimplementedAvgServiceServer
// for forward compatibility
type AvgServiceServer interface {
	GetAvg(AvgService_GetAvgServer) error
	mustEmbedUnimplementedAvgServiceServer()
}

// UnimplementedAvgServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAvgServiceServer struct {
}

func (UnimplementedAvgServiceServer) GetAvg(AvgService_GetAvgServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAvg not implemented")
}
func (UnimplementedAvgServiceServer) mustEmbedUnimplementedAvgServiceServer() {}

// UnsafeAvgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvgServiceServer will
// result in compilation errors.
type UnsafeAvgServiceServer interface {
	mustEmbedUnimplementedAvgServiceServer()
}

func RegisterAvgServiceServer(s grpc.ServiceRegistrar, srv AvgServiceServer) {
	s.RegisterService(&AvgService_ServiceDesc, srv)
}

func _AvgService_GetAvg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AvgServiceServer).GetAvg(&avgServiceGetAvgServer{stream})
}

type AvgService_GetAvgServer interface {
	SendAndClose(*AvgResponse) error
	Recv() (*AvgRequest, error)
	grpc.ServerStream
}

type avgServiceGetAvgServer struct {
	grpc.ServerStream
}

func (x *avgServiceGetAvgServer) SendAndClose(m *AvgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *avgServiceGetAvgServer) Recv() (*AvgRequest, error) {
	m := new(AvgRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AvgService_ServiceDesc is the grpc.ServiceDesc for AvgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sumapi.AvgService",
	HandlerType: (*AvgServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAvg",
			Handler:       _AvgService_GetAvg_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sumapi.proto",
}

// MaxServiceClient is the client API for MaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaxServiceClient interface {
	GetMax(ctx context.Context, opts ...grpc.CallOption) (MaxService_GetMaxClient, error)
}

type maxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaxServiceClient(cc grpc.ClientConnInterface) MaxServiceClient {
	return &maxServiceClient{cc}
}

func (c *maxServiceClient) GetMax(ctx context.Context, opts ...grpc.CallOption) (MaxService_GetMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &MaxService_ServiceDesc.Streams[0], "/sumapi.MaxService/GetMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &maxServiceGetMaxClient{stream}
	return x, nil
}

type MaxService_GetMaxClient interface {
	Send(*MaxRequest) error
	Recv() (*MaxResponse, error)
	grpc.ClientStream
}

type maxServiceGetMaxClient struct {
	grpc.ClientStream
}

func (x *maxServiceGetMaxClient) Send(m *MaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maxServiceGetMaxClient) Recv() (*MaxResponse, error) {
	m := new(MaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxServiceServer is the server API for MaxService service.
// All implementations must embed UnimplementedMaxServiceServer
// for forward compatibility
type MaxServiceServer interface {
	GetMax(MaxService_GetMaxServer) error
	mustEmbedUnimplementedMaxServiceServer()
}

// UnimplementedMaxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaxServiceServer struct {
}

func (UnimplementedMaxServiceServer) GetMax(MaxService_GetMaxServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMax not implemented")
}
func (UnimplementedMaxServiceServer) mustEmbedUnimplementedMaxServiceServer() {}

// UnsafeMaxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaxServiceServer will
// result in compilation errors.
type UnsafeMaxServiceServer interface {
	mustEmbedUnimplementedMaxServiceServer()
}

func RegisterMaxServiceServer(s grpc.ServiceRegistrar, srv MaxServiceServer) {
	s.RegisterService(&MaxService_ServiceDesc, srv)
}

func _MaxService_GetMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaxServiceServer).GetMax(&maxServiceGetMaxServer{stream})
}

type MaxService_GetMaxServer interface {
	Send(*MaxResponse) error
	Recv() (*MaxRequest, error)
	grpc.ServerStream
}

type maxServiceGetMaxServer struct {
	grpc.ServerStream
}

func (x *maxServiceGetMaxServer) Send(m *MaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maxServiceGetMaxServer) Recv() (*MaxRequest, error) {
	m := new(MaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxService_ServiceDesc is the grpc.ServiceDesc for MaxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sumapi.MaxService",
	HandlerType: (*MaxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMax",
			Handler:       _MaxService_GetMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sumapi.proto",
}
